import React, { useState } from 'react';
import Module from '@/components/Module';
import { DatabaseIcon, DownloadIcon } from '@/components/icons';

// Data keys are now sourced from the central store for consistency.
const DATA_KEYS = [
    'tasks', 'habits', 'shoppingListItems', 'itemCategoryMap', 'workoutPlans',
    'workoutHistory', 'journalEntries', 'journalPromptHistory', 'journalDrafts',
    'moodLogs', 'journalAnalysisCache', 'dailyAffirmations',
    'biometricSettings', 'dismissedInsights', 'dailyAffirmationLog', 'lastSyncTime',
    'adaptiveThemeSettings', 'journalSummaryCache', 'mindfulMomentsChat', 'journalLastPromptIndex'
];

const DataManagementModule: React.FC<{ className?: string }> = ({ className = '' }) => {
    const [isExporting, setIsExporting] = useState(false);
    const [statusMessage, setStatusMessage] = useState('');

    const legacyExport = () => {
        // Fallback for browsers that don't support Background Fetch
        const allData: Record<string, any> = {};
        DATA_KEYS.forEach(key => {
            const storedValue = localStorage.getItem(key);
            if (storedValue) {
                try {
                    const parsed = JSON.parse(storedValue);
                    allData[key] = parsed.data !== undefined ? parsed.data : parsed;
                } catch (e) { /* ignore */ }
            }
        });

        const jsonString = JSON.stringify(allData, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        const timestamp = new Date().toISOString().split('T')[0];
        
        link.href = url;
        link.download = `life-sync-backup-${timestamp}.json`;
        link.click();
        URL.revokeObjectURL(url);
    }

    const handleExportData = async () => {
        setIsExporting(true);
        setStatusMessage('Starting export...');

        try {
            const registration = await navigator.serviceWorker.ready;
            // @ts-ignore
            if (!registration.backgroundFetch) {
                console.log('Background Fetch not supported, using legacy download.');
                setStatusMessage('Using fallback download...');
                legacyExport();
                setStatusMessage('Export complete.');
                setTimeout(() => setStatusMessage(''), 2000);
                return;
            }

            const timestamp = new Date().toISOString().split('T')[0];
            const fetchId = `lifesync-backup-${timestamp}`;
            const downloadUrl = `/generate-backup?t=${Date.now()}`; // Add timestamp to ensure it's not cached

            // @ts-ignore
            await registration.backgroundFetch.fetch(fetchId, [downloadUrl], {
                title: 'Life Sync Data Backup',
                icons: [{ sizes: '192x192', src: '/icons/icon-192x192.png', type: 'image/png' }],
                downloadTotal: 0, // Total size is unknown until generated by SW
            });

            setStatusMessage('Export started in the background!');

        } catch (error) {
            console.error("Failed to start background fetch:", error);
            setStatusMessage('Export failed. See console.');
        } finally {
            setIsExporting(false);
            setTimeout(() => setStatusMessage(''), 3000);
        }
    };

    return (
        <Module title="Data Management" icon={<DatabaseIcon />} className={className}>
            <div className="flex flex-col items-center justify-center p-4">
                <p className="text-gray-400 text-center mb-4">
                    Download a complete backup of all your application data. The download will continue in the background.
                </p>
                <button
                    onClick={handleExportData}
                    disabled={isExporting}
                    className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition disabled:bg-gray-500"
                >
                    <DownloadIcon className="w-5 h-5" />
                    {isExporting ? 'Preparing...' : 'Export All Data'}
                </button>
                {statusMessage && <p className="text-caption mt-4 h-4">{statusMessage}</p>}
            </div>
        </Module>
    );
};

export default DataManagementModule;